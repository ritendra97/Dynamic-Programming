import java.util.*;
public class DynaminProgramming 
{
	/*// with recursion
	public static int lcs( char[] X, char[] Y, int m, int n ) 
	{
		if(m==0 || n==0)
			return 0;
		if(X[m-1] == Y[n-1])
			return 1+lcs(X,Y,m-1,n-1);
		else
			return Math.max(lcs(X,Y,m-1,n), lcs(X,Y,m,n-1));
	}
	
	// recursion+Memoization(Bottom Up) Approach
	public static int lcs( char[] X, char[] Y, int m, int n , int subsequence[][]) 
	{
		if(m==0 || n==0)
			return 0;
		if(subsequence[m-1][n-1]!=-1)
			return subsequence[m-1][n-1];
		if(X[m-1] == Y[n-1])
		{
			subsequence[m-1][n-1]=1+lcs(X,Y,m-1,n-1,subsequence);
			return subsequence[m-1][n-1];
		}
		
		else
		{
			subsequence[m-1][n-1]=Math.max(lcs(X,Y,m-1,n,subsequence), lcs(X,Y,m,n-1,subsequence));
			return subsequence[m-1][n-1];
		}
	}*/
	// Top Down Approach
	// n max hoga
	// m must be lesser than n
	public static int lcs( char[] X, char[] Y, int m, int n) 
	{
		int DP[][] = new int[m+1][n+1];
		
		for(int i=0;i<=m;i++)
		{
			for(int j=0;j<=n;j++)
			{
				if(i==0 || j==0)
					DP[i][j]=0;
				else if(X[i-1]==Y[j-1])
					DP[i][j]=DP[i-1][j-1]+1;
				else
					DP[i][j]=Math.max(DP[i-1][j], DP[i][j-1]);
			}
		}
		
		return DP[m][n];
	}
	public static void main(String[] args) 
	{
		String s1 = "AGGTAB"; 
	    String s2 = "GXTXAYB"; 
	  
	    char[] X=s1.toCharArray(); 
	    char[] Y=s2.toCharArray(); 
	    int m = X.length; 
	    int n = Y.length;
	    // this is for memoziation
//	    int maximum = X.length>Y.length?X.length:Y.length;
//	    int subsequence[][] = new int[m][maximum];
//	    for (int[] row : subsequence) { 
//            Arrays.fill(row, -1); 
//        } 
	    System.out.println("Length of LCS is" + " " +lcs( X, Y, m, n) );
	}
}

//Largest divisible pairs subset

Time Complexity = O(n^2)
Space Complexity = O(n)

import java.util.Arrays;

public class Main2{

    public static void Solve(int arr[], int n){

        int dp[] = new int[n];
        dp[n-1]=1;
        for(int i= arr.length-2;i>=0;i--){

            int max = 0;
            for(int j = i+1;j<dp.length;j++){
                if(arr[i]%arr[j]==0 || arr[j]%arr[i]==0){
                    max = Math.max(max,dp[j]);
                }
            }

            dp[i] = max+1;
        }
        System.out.println(Arrays.stream(dp).max().getAsInt());
    }
    public static void main(String[] args){

        int arr[] = {1,3,6,13,17,18};
        int n = arr.length;
        Solve(arr,n);
    }
}

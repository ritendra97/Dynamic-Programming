//Find minimum number of coins that make a given value

public class Solution {

	public static int Helper(int[] coins,int amount, int index, int coin){

        if(amount<0 || index>=coins.length) return Integer.MAX_VALUE;

        if(amount==0){
            return coin;
        }

        return Math.min(Helper(coins,amount-coins[index],index, coin+1), Helper(coins,amount,index+1, coin));
    }
    public static int coinChange(int[] coins, int amount) {
        return Helper(coins,amount,0,0);
    }

    public static void main(String [] args){

        int coins[] = {2,3,5};
        int amount = 10;
        System.out.println(coinChange(coins,amount));
    }
}

import java.util.*;
public class DynamicProgramming 
{
	public static int minCoins(int coins[],int m,int V)
	{
		int dp[] = new int[V+1];
		
		Arrays.fill(dp,Integer.MAX_VALUE);
		dp[0]=0;
		int result =0;
		for(int i =1;i<=V;i++)
		{
			for(int j = 0;j<coins.length;j++)
			{
				if(coins[j]<=i)
				{
					int temp = dp[i-coins[j]];
					if(temp!=Integer.MAX_VALUE && temp+1<dp[i])
						dp[i]=temp+1;
				}
				
			}
		}
		return dp[V];
	}
	public static void main(String[] args)
	{
		 int coins[] =  {9, 6, 5, 1};
	     int m = coins.length;
	     int V = 11;
	     System.out.println("Minimum coins required is "+ minCoins(coins, m, V));
	}
}

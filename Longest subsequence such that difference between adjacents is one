//Longest subsequence such that difference between adjacents is one
import java.util.*;
public class DynamicProgramming 
{
	public static int longestsubsequence(int arr[])
	{
		int dp[] = new int[arr.length];
		
		Arrays.fill(dp,1);
		
		for(int i=1;i<arr.length;i++)
		{
			for(int j=0;j<i;j++)
			{
				if(arr[i]==arr[j]+1 || arr[i]==arr[j]-1)
				{
					dp[i]= Math.max(dp[i], dp[j]+1);
				}
			}
		}
		
		int result = Integer.MIN_VALUE;
		for(int i=0;i<arr.length;i++)
		{
			if(result<dp[i])
				result=dp[i];
		}
		return result;
	}
	public static void main(String[] args) 
	{
		int arr[]={10,9,4,5,4,8,6};
		
		System.out.println(longestsubsequence(arr));
	}
}

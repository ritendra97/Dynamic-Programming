//Longest subsequence such that difference between adjacents is one
import java.util.*;
public class DynamicProgramming 
{
	public static int longestsubsequence(int arr[])
	{
		int dp[] = new int[arr.length];
		
		Arrays.fill(dp,1);
		
		for(int i=1;i<arr.length;i++)
		{
			for(int j=0;j<i;j++)
			{
				if(arr[i]==arr[j]+1 || arr[i]==arr[j]-1)
				{
					dp[i]= Math.max(dp[i], dp[j]+1);
				}
			}
		}
		
		int result = Integer.MIN_VALUE;
		for(int i=0;i<arr.length;i++)
		{
			if(result<dp[i])
				result=dp[i];
		}
		return result;
	}
	public static void main(String[] args) 
	{
		int arr[]={10,9,4,5,4,8,6};
		
		System.out.println(longestsubsequence(arr));
	}
}

import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

public class Main2 {

	public static int Solution(int arr[]) {

		int n = arr.length;
		Integer dp[] = new Integer[n];
		Map<Integer, Integer> map = new HashMap<>();
		map.put(arr[0], 0);

		for (int i = 1; i < arr.length; i++) {

			if (arr[i] == arr[i - 1]) {
				dp[i] = dp[i - 1] + 1;
			} else {
				if (map.containsKey(arr[i] + 1) || map.containsKey(arr[i] - 1)) {
					dp[i] = Math.max(map.getOrDefault(arr[i] + 1, 0) + 1, map.getOrDefault(arr[i] - 1, 0) + 1);
				} else {
					dp[i] = 1;
				}
			}
			map.put(arr[i], dp[i]);
		}

		return Collections.max(Arrays.asList(dp));
	}

	public static void main(String[] args) {
		int arr[] = { 10, 9, 4, 5, 4, 8, 6 };
		Solution(arr);
	}
}

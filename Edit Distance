//Edit Distance
import java.util.*;
public class DynamicProgramming 
{
	public static int editDistDP(String str1,String str2,int m ,int n,int dp[][])
	{
		if(m==0)
			return n;
		if(n==0)     
			return m;
		
		if(dp[m][n]!=-1)
			return dp[m][n];
		if(str1.charAt(m-1)==str2.charAt(n-1))
		{
			dp[m][n]=editDistDP(str1,str2,m-1,n-1,dp);
			return dp[m][n];
		}
		else
			{
			dp[m][n]=1+Math.min(editDistDP(str1,str2,m,n-1,dp),Math.min(editDistDP(str1,str2,m-1,n,dp),editDistDP(str1,str2,m-1,n-1,dp)));
			return dp[m][n];
			}
	}
	public static void main(String[] args) 
	{
		String str1 = "sunday";
        String str2 = "saturday";
        int dp[][] = new int[str1.length()+1][str2.length()+1];
        for(int row[]:dp)
        {
        	Arrays.fill(row,-1);
        }
        System.out.println(editDistDP(str1, str2, str1.length(), str2.length(),dp));
	}
}
// Using DP

import java.util.*;
public class DynamicProgramming 
{
	public static int editDistDP(String str1,String str2,int m ,int n)
	{
		int dp[][] = new int[str1.length()+1][str2.length()+1];
		
		for(int i=0;i<=m;i++)
		{
			for(int j=0;j<=n;j++)
			{
				if(i==0)
					dp[i][j]=j;
				else if(j==0)
					dp[i][j]=i;
				else if(str1.charAt(i-1)==str2.charAt(j-1))
					dp[i][j] = dp[i-1][j-1];
				else
					dp[i][j] = 1+Math.min(dp[i][j-1], Math.min(dp[i-1][j],dp[i-1][j-1]));
					
			}
		}
		return dp[m][n];
	}
	public static void main(String[] args) 
	{
		String str1 = "sunday";
        String str2 = "saturday";
        
        System.out.println(editDistDP(str1, str2, str1.length(), str2.length()));
	}
}

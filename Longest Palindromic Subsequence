//Longest Palindromic Subsequence
import java.util.*;
public class DynamicProgramming 
{
	public static int lcs(String X, String Y,int m,int n)
	{
		int DP[][] = new int[m+1][n+1];
		
		for(int i=0;i<=m;i++)
		{
			for(int j=0;j<=n;j++)
			{
				if(i==0 || j==0)
				{
					DP[i][j]=0;
				}
				else if(X.charAt(i-1)==Y.charAt(j-1))
				{
					DP[i][j]=1+DP[i-1][j-1];
				}
				else
				{
					DP[i][j] = Math.max(DP[i-1][j], DP[i][j-1]);
				}
					
			}
		}
		return DP[m][n];
	}
	public static int LongestPalindromicSubsequence(String str)
	{
		StringBuilder str_reverse = new StringBuilder(str);
		
		str_reverse.reverse();
		
		int m=str.length();
		int n=str_reverse.toString().length();
		
		int required = lcs(str,str_reverse.toString(),m,n);
		
		return required;
	}
	public static void main(String[] args) 
	{
		String seq = "agbcba"; 

        System.out.println("The length of the Longest Palindromic Subsequence is "+ LongestPalindromicSubsequence(seq)); 
	}
}

// One more Solution


//Given two strings, find if first string is a subsequence of second
import java.util.*;

public class DynamicProgramming {

	public static void longestPalindromicSubsequence(String str) {
		
		int dp[][] = new int[str.length()][str.length()];
		
		for(int g=0;g<str.length();g++) {
			for(int i =0,j=g;j<str.length();i++,j++) {
				if(g==0) {
					dp[i][j]=1;
				}else if(g==1) {
					dp[i][j] = str.charAt(i)==str.charAt(j)?2:1;
				}else {
					if(str.charAt(i)==str.charAt(j)){
						dp[i][j] = dp[i+1][j-1]+2;
					}else {
						dp[i][j] = Math.max(dp[i][j-1], dp[i+1][j]);
					}
				}
			}
		}
		
		System.out.println(dp[0][str.length()-1]);
	}

	public static void main(String[] args) {
		String seq = "GEEKSFORGEEKS";
		longestPalindromicSubsequence(seq);
	}
}

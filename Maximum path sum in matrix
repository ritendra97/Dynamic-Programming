// TC-> m*n
// SC-> M*N
import java.util.*;
public class DynamicProgramming {

	public static int findMaxPath(int mat[][])
	{
		 int res = Integer.MIN_VALUE;
		 int m = mat.length;
		 int n = mat[0].length;
		 
		 int dp[][] = new int[m][n];
		 
		 for(int i=0;i<n;i++) {
			 
			 dp[0][i]= mat[0][i];
		 }
		 
		 for(int i=1;i<m;i++) {
			 
			 for(int j=0;j<n;j++) {
				 
				 if(j>0 && j<n-1) {
					 dp[i][j]= Math.max(dp[i-1][j], Math.max(dp[i-1][j-1], dp[i-1][j+1]))+mat[i][j];
				 }else if(j==0) {
					 dp[i][j]= Math.max(dp[i-1][j], dp[i-1][j+1])+mat[i][j];
				 }else if(j==n-1) {
					 dp[i][j]= Math.max(dp[i-1][j], dp[i-1][j-1])+mat[i][j];
				 }
			 }
		 }
		 return dp[m-1][n-1];
	}
	public static void main(String[] args) {
		 
		int mat[][] = {{ 1,2,3},
                       { 9,8,7},
                       { 4,5,6}};
		
		System.out.println(findMaxPath(mat));
	}

}

// TC = M*N
// SC = O(1);
import java.util.*;
public class DynamicProgramming {

	public static int findMaxPath(int mat[][])
	{
		 int res = Integer.MIN_VALUE;
		 int m = mat.length;
		 int n = mat[0].length;
		 
		 for(int i=0;i<n;i++) {
			 res = Math.max(res, mat[0][i]);
		 }
		 
		 for(int i=1;i<m;i++) {
			 res=-1;
			 for(int j=0;j<n;j++) {
				 
				 if(j>0 && j<n-1) {
					 mat[i][j]+= Math.max(mat[i-1][j], Math.max(mat[i-1][j-1], mat[i-1][j+1]));
				 }else if(j==0) {
					 mat[i][j]+= Math.max(mat[i-1][j], mat[i-1][j+1]);
				 }else if(j==n-1) {
					 mat[i][j]+= Math.max(mat[i-1][j], mat[i-1][j-1]);
				 }
				 
				 res= Math.max(mat[i][j], res);
			 }
		 }
		 return res;
	}
	public static void main(String[] args) {
		 
		int mat[][] = {{ 10, 10, 2, 0, 20,4},
                       { 1, 0, 0, 30, 2, 5 },
                       { 0, 10, 4, 0, 2, 0 },
                       { 1, 0, 2, 20, 0, 4 }};
		
		System.out.println(findMaxPath(mat));
	}

}

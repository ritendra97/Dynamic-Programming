//Subset Sum Problem 
// here we have both solution bruteforce and DP

import java.util.Arrays;

public class DynamicPrograming {

	static boolean isSubsetSum(int set[], int n, int sum) {
		
		if (n == 0)
			return false;
		
		if(sum==0)
			return true;
		if(set[n-1]>sum)
			return isSubsetSum(set,n-1,sum);
		else 
			return isSubsetSum(set,n-1,sum) || isSubsetSum(set,n-1,sum-set[n-1]);
		
	}

	public static void main(String[] args) {

		int set[] = { 3, 34, 4, 12, 5, 2 };
		int sum = 9;

		System.out.println(isSubsetSum(set,set.length-1,9));
	}
}

import java.util.*;
//Subset Sum Problem 
public class Solution 
{
   public static boolean subsetSumProblemUtil(int index, int arr[],int sum,boolean dp[][]) {
    	
	   if(sum==0)
		   return true;
	   if(index==arr.length)
		   return false;
	   
	   if(dp[index][sum]!=false)
		   return dp[index][sum];
	   
	   if(arr[index]>sum)
		   return subsetSumProblemUtil(index+1,arr,sum,dp);
	   else {
		   dp[index][sum] = subsetSumProblemUtil(index+1,arr,sum-arr[index],dp);
	       dp[index][sum] = subsetSumProblemUtil(index+1,arr,sum,dp);
	   }
	   
       return dp[index][sum];
    }
    public static boolean subsetSumProblem(int arr[],int sum) {
    	
    	boolean dp[][] = new boolean[100][100];
    	return subsetSumProblemUtil(0,arr,sum,dp);
    }
	public static void main(String[] args) {
		
		int arr[] = {3, 34, 4, 12, 5, 2};
		int sum =78;
		System.out.println(subsetSumProblem(arr,sum));
	}
}


// Below approach
//This means that if current element has value greater than ‘current sum value’ we will copy the answer for previous cases
//And if the current sum value is greater than the ‘ith’ element we will see if any of previous states have already experienced the sum=’j’
//OR any previous states experienced a value ‘j – A[i]’ which will solve our purpose.

import java.util.*;
public class DynamicProgramming 
{
	/*
	public static boolean Subsetsum(int set[],int sum)
	{
		for(int i =0;i<set.length;i++)
		{
			for(int j=0;j<set.length;j++)
			{
				if(j!=i)
				{
					if(set[i]+set[j]==sum)
						return true;
				}
			}
		}
		return false;
	}*/
	public static boolean Subsetsum(int set[],int sum)
	{
		boolean ans_matrix[][] = new boolean[set.length+1][sum+1];
		for(int i=0;i<=set.length;i++)
		{
			for(int j=0;j<=sum;j++)
			{
				if(i==0)
				{
					ans_matrix[i][j]=false;
				}
				else if(j==0)
				{
					ans_matrix[i][j]=true;
				}
			}
		}
		for(int i=1;i<=set.length;i++)
		{
			for(int j=1;j<=sum;j++)
			{
				if(set[i-1]<=j)
				{
					ans_matrix[i][j]=ans_matrix[i-1][j-set[i-1]] || ans_matrix[i-1][j];
				}
				else 
				{
					ans_matrix[i][j]=ans_matrix[i-1][j];
				}
			}
		}
		return ans_matrix[set.length][sum];
	}
	public static void main(String[] args) 
	{
		int set[] = {2, 3, 7, 8, 10};
		int sum = 11;
		System.out.println(Subsetsum(set,sum));
	}
}

Brute Force 
//Maximum size square sub-matrix with all 1s

public class Main2{

    public static void Solution(int arr[][]){

        int max = Integer.MIN_VALUE;

        for(int i = 0;i< arr.length;i++){

            for(int j = 0;j<arr[0].length;j++){

                if(arr[i][j]==1){

                    int Sqlen = 1;
                    boolean isOkey = true;

                    while(Sqlen+i< arr.length && Sqlen+j< arr[0].length && isOkey){

                        for(int k = j;k<=Sqlen+j;k++){
                            if(arr[i+Sqlen][k]==0){
                                isOkey = false;
                                break;
                            }

                        }

                        for(int k=i;k<=Sqlen+i;k++){
                            if(arr[k][j+Sqlen]==0){
                                isOkey = false;
                                break;
                            }
                        }

                        if(isOkey) Sqlen = Sqlen+1;
                    }
                    if(max<Sqlen) max = Sqlen;
                }
            }
        }

        System.out.println(max);
    }

    public static void main(String[] args){

        int grid[][] = {{0,1,1,0,1},
                        {1,1,0,1,0},
                        {0,1,1,1,0},
                        {1,1,1,1,0},
                        {1,1,1,1,1},
                        {0,0,0,0,0}};

        Solution(grid);
    }
}


//Find the size of the largest square submatrix of 1â€™s present in a binary matrix

import java.util.*;
public class DynamicProgramming 
{
	public static int printmaxsubsquarematrix(int M[][])
	{
		int dp[][] = new int[M.length][M.length];
		int R= M.length;
		int C= M[0].length;
		int ans=0;
		for(int i=dp.length-1;i>=0;i--)
		{
			for(int j=dp.length-1;j>=0;j--)
			{
				if(i==dp.length-1 && j==dp[0].length-1)
				{
					dp[i][j]=M[i][j];
				}
				else if(i==dp.length-1)
				{
					dp[i][j]=M[i][j];
				}
				else if(j==dp[0].length-1)
				{
					dp[i][j]=M[i][j];
				}
				else
				{
					if(M[i][j]==0)
						dp[i][j]=0;
					else
					{
						int min = Math.min(dp[i][j+1], dp[i+1][j]);
						min=Math.min(min, dp[i+1][j+1]);
						dp[i][j]=min+1;
						
						if(dp[i][j]>ans)
							ans=dp[i][j];
					}
				}
			}
		}
		return ans;
	}
	public static void main(String[] args) 
	{
		int M[][] = {{0,1,1,0,1},
				     {1,1,0,1,0},
				     {0,1,1,1,0},
				     {1,1,1,1,0},
				     {1,1,1,1,1},
				     {0,0,0,0,0}};
		System.out.println(printmaxsubsquarematrix(M));
	}
}

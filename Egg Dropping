import java.util.*;
// this is dp 
import java.util.*;
public class DynamicProgramming 
{
	public static int eggDrope(int e,int f)
	{
		//column will be floors
		// row will be eggs
		
		int dp[][] = new int[e+1][f+1];
		
		for(int i=1;i<=e;i++)
		{
			for(int j=1;j<=f;j++)
			{
				if(i==1)// if floor is equal to egg than
				{
					dp[i][j] = j;
				}
				// if floor is 1
				else if (j==1)
				{
					dp[i][j]=1;
				}
				else
				{
					int min = Integer.MAX_VALUE;
					for(int mj = j-1,pj=0;mj>=0;mj--,pj++)
					{
						int val = Math.max(dp[i][mj],dp[i-1][pj]);
						
						if(min>val)
							min=val;
					}
					dp[i][j]=min+1;
				}
			}
		}
		return dp[e][f];
	}
	public static void main(String[] args) 
	{
		Scanner scn = new Scanner(System.in);
		
		System.out.println("Enter Number of eggs: ");
		int e = scn.nextInt();
		
		System.out.println("Enter Number of floors: ");
		
		int f = scn.nextInt();
		
		System.out.println(eggDrope(e,f));
	}
}
// below id recursion
public class DynamicProgramming 
{
	static int eggDrop(int n, int k) 
    { 
        if (k == 1 || k == 0) 
            return k; 
        if (n == 1) 
            return k; 
  
        int min = Integer.MAX_VALUE; 
        int x, res; 
        for (x = 1; x <= k; x++) { 
            res = Math.max(eggDrop(n - 1, x - 1), 
                           eggDrop(n, k - x)); 
            if (res < min) 
                min = res; 
        } 
  
        return min + 1; 
    } 
	public static void main(String[] args) 
	{
		 int n = 2, k = 10; 
	        System.out.print("Minimum number of "
	                         + "trials in worst case with "
	                         + n + " eggs and " + k 
	                         + " floors is " + eggDrop(n, k));
	}
}

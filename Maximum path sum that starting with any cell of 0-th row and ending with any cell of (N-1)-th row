//Maximum path sum that starting with any cell of 0-th row and ending with any cell of (N-1)-th row
import java.util.*;
public class DynamicProgramming 
{
	public static int maximumPath(int mat[][])
	{
		int dp[][] = new int[mat.length][mat[0].length];
		
		for(int i=dp.length-1;i>=0;i--)
		{
			for(int j=dp[0].length-1;j>=0;j--)
			{
				if(i==dp.length-1)
				{
					dp[i][j] = mat[i][j];
				}
				else if(j==dp[0].length-1)
				{
					dp[i][j] = Math.max(dp[i+1][j], dp[i+1][j-1])+mat[i][j];
				}	
				else if(j==0)
				{
					dp[i][j] = Math.max(dp[i+1][j],dp[i+1][j+1])+mat[i][j]; 
				}
				else
				{
					dp[i][j] = Math.max(dp[i+1][j],Math.max(dp[i+1][j+1], dp[i+1][j-1]))+mat[i][j];
				}
			}
		}
		int result = Integer.MIN_VALUE;
		
		for(int i=0;i<dp[0].length;i++)
		{
			if(result<dp[0][i])
				result=dp[0][i];
		}
		return result;
	}
	public static void main(String[] args)
	{
		int mat[][]= {{4,2,3,4},
				      {2,9,1,10},
			          {15,1,3,0},
				      {16,92,41,44}};
		System.out.println(maximumPath(mat));
    }
}

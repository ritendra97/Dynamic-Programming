//Remove minimum elements from either side such that 2*min becomes more than max
import java.util.*;
public class DynamicProgramming 
{
	public static int find_min(int arr[], int l, int h)
	{
		int min = arr[l];
		for(int i=l+1;i<=h;i++)
		{
			if(min>arr[i])
				min = arr[i];
		}
		return min;
	}
	
	public static int find_max(int arr[], int l, int h)
	{
		int max = arr[l];
		for(int i=l+1;i<=h;i++)
		{
			if(max<arr[i])
				max = arr[i];
		}
		return max;
	}
	
	public static int removeelements(int arr[])
	{
		int dp[][] = new int[arr.length][arr.length];
		
		for(int gap = 0;gap<dp.length;gap++)
		{
			for(int i=0,j=gap;j<dp.length;i++,j++)
			{
				int mn = find_min(arr,i,j);
				int mx = find_max(arr,i,j);
				
				dp[i][j] = (2*mn>mx)?0:Math.min(dp[i][j-1],dp[i+1][j])+1;
			}
		}
		
		return dp[0][arr.length-1];
	}
	public static void main(String[] args) 
	{
		int arr[] = {20, 4, 1, 3};
		int n = arr.length;
	
		System.out.println(removeelements(arr));
	}
}

//Optimal Binary Search Tree
import java.util.*;
public class DynamicProgramming 
{
	public static int OptimalBST(int keys[],int freq[],int n)
	{
		int dp[][]= new int[n][n];
		for(int g=0;g<dp.length;g++)
		{
			for(int i=0,j=g;j<n;j++,i++)
			{
				if(g==0)
					dp[i][j]=freq[i];
				if(g==1)
				{
					int f1 = freq[i];
					int f2 = freq[j];
					dp[i][j]=Math.min(f1+2*f2,2*f1+f2);
				}
				else
				{
					int min = Integer.MAX_VALUE;
					int tfs = 0;
					for(int f=i;f<=j;f++)
					{
						tfs+= freq[f]; 
					}
					for(int k=i;k<=j;k++)
					{
						int left = k==i?0:dp[i][k-1];
						int right = k==j?0:dp[k+1][j];
						
						if(min>left+right+tfs)
							min =left+right+tfs;
					}
					dp[i][j] = min;
				}
					
			}
		}
		return dp[0][n-1];
	}
	public static void main(String[] args) 
	{
		int keys[] = {10,12,20};
		int freq[] = {34,8,50};
		
		int n = keys.length;
		System.out.println(OptimalBST(keys,freq,n));
	}
}
// We can optimized frequencies by using prefix sum array

import java.util.*;
public class DynamicProgramming 
{
	public static int OptimalBST(int keys[],int freq[],int n)
	{
		int dp[][]= new int[n][n];
		
		int psa[] = new int[n];
		psa[0] = freq[0];
		for(int i =1;i<n;i++)
		{
			psa[i] = psa[i-1]+freq[i];
		}
		
		for(int g=0;g<dp.length;g++)
		{
			for(int i=0,j=g;j<n;j++,i++)
			{
				if(g==0)
					dp[i][j]=freq[i];
				if(g==1)
				{
					int f1 = freq[i];
					int f2 = freq[j];
					dp[i][j]=Math.min(f1+2*f2,2*f1+f2);
				}
				else
				{
					int min = Integer.MAX_VALUE;
					int tfs = psa[j]-(i==0?0:psa[i-1]);
					
					for(int k=i;k<=j;k++)
					{
						int left = k==i?0:dp[i][k-1];
						int right = k==j?0:dp[k+1][j];
						
						if(min>left+right+tfs)
							min =left+right+tfs;
					}
					dp[i][j] = min;
				}
					
			}
		}
		return dp[0][n-1];
	}
	public static void main(String[] args) 
	{
		int keys[] = {10,12,20};
		int freq[] = {34,8,50};
		
		int n = keys.length;
		System.out.println(OptimalBST(keys,freq,n));
	}
}

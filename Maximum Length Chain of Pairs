//Maximum Length Chain of Pairs
// TC->O(n^2)
class Pair
{
    int a;
    int b;
     
    public Pair(int a, int b)
    {
        this.a = a;
        this.b = b;
    }
    
    static int maxChainLength(Pair arr[], int n)
    {
       int i, j, max = 0;
       int mcl[] = new int[n];
      
        values for all indexes */
       for ( i = 0; i < n; i++ )
          mcl[i] = 1;
    
    for ( i = 1; i < n; i++ )
          for ( j = 0; j < i; j++ )
             if ( arr[i].a > arr[j].b &&
                    mcl[i] < mcl[j] + 1)
                mcl[i] = mcl[j] + 1;
      
    
    for ( i = 0; i < n; i++ )
          if ( max < mcl[i] )
             max = mcl[i];
      
       return max;
    }
 
    public static void main(String[] args)
    {
        Pair arr[] = new Pair[]
        {
          new Pair(5,24),
          new Pair(15, 25),                     
          new Pair (27, 40),
          new Pair(50, 60)};
         System.out.println("Length of maximum
                               size chain is " +
                 maxChainLength(arr, arr.length));
    }
}

// TC-> O(nlogn)
//
import java.util.*;
class pair {
	int start;
	int finish;

	pair(int start,int finish){	
		this.start=start;
		this.finish=finish;
	}
}
public class Solution 
{
	public static int maximum_length(pair arr[]) {
		
		int count=1;
		int n = arr.length;
		
		Arrays.sort(arr,new Comparator<pair>() {
			public int compare(pair p1,pair p2) {
				return p1.finish - p2.finish;
			}
		});
		int s=arr[0].finish;
		for(int i=1;i<n;i++) {
			
			if(arr[i].start>s) {
				count++;
				s = arr[i].finish;
			}
		}
		return count;
	}
	public static void main(String[] args) {
		
		pair pairs[] = {new pair(1, 2), new pair(3, 4),new pair(0, 6), new pair(5,7), new pair(8,9),new pair(5,9)};
		
		System.out.println(maximum_length(pairs));
	}
}

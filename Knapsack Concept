//Knapsack Concept
import java.util.*;
public class DynamicProgramming 
{
	static int knapSack(int W, int wt[], int val[], int n) 
    {  
		if(n==0|| W==0)
			return 0;
		if(wt[n-1]>W)
			return knapSack(W,wt,val,n-1);
		else
			return Math.max(val[n-1]+knapSack(W-wt[n-1],wt,val,n-1), knapSack(W,wt,val,n-1));
    } 
	public static void main(String[] args) 
	{
		int N = 3;
		int W = 4;
		int values[] = {1,2,3};
		int weight[] = {4,5,1};
		
		System.out.println(knapSack( W, weight,values,N));
	}

}
// Using DP
import java.util.*;
public class DynamicProgramming 
{
	static int knapSack(int W, int wt[], int val[], int n) 
    {  
		int dp[][] = new int[n+1][W+1];
		for(int i=0;i<=W;i++)
		{
			dp[0][i] = 0;
		}
		
		for(int i=0;i<=n;i++)
		{
			dp[i][0] = 1;
		}
		
		for(int i=1;i<=n;i++)
		{
			for(int j=1;j<=W;j++)
			{
				if(wt[i-1]<=j)
				{
					dp[i][j] = Math.max(val[i-1]+dp[i-1][j-wt[i-1]], dp[i-1][j]);
				}
				else
				{
					dp[i][j]= dp[i-1][j];
				}
			}
		}
		return dp[n][W];
    } 
	public static void main(String[] args) 
	{
		int N = 3;
		int W = 4;
		int values[] = {1,2,3};
		int weight[] = {4,5,1};
		
		System.out.println(knapSack( W, weight,values,N));
	}

}
// Memoziation
class Solution 
{ 
    static int knapSackUtil(int W, int wt[], int val[], int n,int t[][]) 
    {
        if(n==0|| W==0)
			return 0;
		if(t[n][W]!=-1)
		   return t[n][W];
		   
		if(wt[n-1]>W)
			return t[n][W]= knapSackUtil(W,wt,val,n-1,t);
		else
			return t[n][W]= Math.max(val[n-1]+knapSackUtil(W-wt[n-1],wt,val,n-1,t), knapSackUtil(W,wt,val,n-1,t));
    }    
    static int knapSack(int W, int wt[], int val[], int n) 
    {
        int t[][] = new int[n + 1][W + 1];
     
    // Loop to initially filled the
    // table with -1
        for(int i = 0; i < n + 1; i++)  
           for(int j = 0; j < W + 1; j++)  
               t[i][j] = -1;
               
        return knapSackUtil(W, wt,val,n,t);       
    } 
}

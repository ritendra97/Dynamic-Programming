//Minimum cost to reach the top of the floor by climbing stairs

public class Main2 {

	public static int Helper(int arr[], int index, int min_jump, int jumps) {

		if (index >= arr.length - 1) {
			if (min_jump > jumps) {
				min_jump = jumps;
				return min_jump;
			}
			return Integer.MAX_VALUE;
		}

		return Math.min(Helper(arr, index + arr[index], min_jump, jumps + 1),
				Helper(arr, index + 1, min_jump, jumps + 1));
	}

	public static int Solution(int arr[]) {
		return Helper(arr, 0, Integer.MAX_VALUE, 0);
	}

	public static void main(String[] args) {
		int arr[] = { 1, 3, 6, 3, 2, 3, 6, 8, 9, 5 };
		System.out.println(Solution(arr));
	}
}


import java.util.*;
import java.util.*;
public class BinarySearch 
{
	 public static  int minCostClimbingStairs(int[] cost) 
	 {      
	     int n = cost.length;
	     Integer DP[]= new Integer[n+1];
	     DP[n]=0;
	     for(int i=n-1;i>=0;i--)
	     {
	         if(cost[i]>0)
	         {
	             int min = Integer.MAX_VALUE;
	             for(int j=1;j<=cost[i] && (i+j)<DP.length;j++)
	             {
	                 if(DP[i+j]!=null)
	                 {
	                     min = Math.min(min,DP[i+j]);
	                 }
	             }
	             if(min!=Integer.MAX_VALUE)
	             {
	                 DP[i]=min+1;
	             }
	         }
	      }
	      return DP[0];
	 }	
	 public static void main(String[] args) 
	 {
		  int[] cost = {16, 19, 10, 12, 18}; 
	 	
          System.out.println(minCostClimbingStairs(cost));
	}
}

public class Main2 {

	public static int Solution(int arr[]) {
		int curr_jump = 0;
		int next_jump = 0;
		int jump = 0;
		
		for(int i = 0;i<arr.length;i++) {
			next_jump = Math.max(i, arr[i]+next_jump);
			
			if(i==curr_jump) {
				curr_jump = next_jump;
				jump++;
			}
		}
		
		return jump;
	}

	public static void main(String[] args) {
		int arr[] = { 1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9 };
		System.out.println(Solution(arr));
	}
}

//Maximum Sum Increasing Subsequence
public class Solution 
{
	static void printMaxSubSquare(int M[][]) {
		
		int m = M.length;
		int n = M[0].length;
		
		int dp[][] = new int[m][n];
		
		for(int i = m-1;i>=0;i--) {
			
			for(int j = n-1;j>=0;j--) {
				
				if(i==M.length-1 && j==M[0].length-1){
				    dp[i][j] = M[i][j];
				}
				else if(i==m-1) {
					dp[i][j] = M[i][j];
				}else if(j==n-1) {
					dp[i][j] = M[i][j];
				}else{
					if(M[i][j]==0) {
						dp[i][j]=0;
					}else {
						int min = Math.min(dp[i][j+1], dp[i+1][j]);
						min = Math.min(min, dp[i+1][j+1]);
						dp[i][j] = min+1;
					}
				}
			}
		}
		for(int i=0;i<m;i++) {
			for(int j = 0;j<n;j++) {
				System.out.print(dp[i][j]+ " ");
			}
			System.out.println();
		}
    }
	public static void main(String[] args) {
		
		int M[][] = {{0, 1, 1, 0, 1}, 
                     {1, 1, 0, 1, 0}, 
                     {0, 1, 1, 1, 0},
                     {1, 1, 1, 1, 0},
                     {1, 1, 1, 1, 1},
                };
		
		printMaxSubSquare(M);
	}
}

// Longest subsequence where every character appears at-least k times
import java.util.*;
public class Practice 
{
	// this is nlogn
	public static int[] LIS(int arr[],int n)
	{
		int lIS[] = new int[n];
		int len=0;
		for(int k=0;k<n;k++)
		{
			int i=0;
			int j=len;
			while(i<j)
			{
				int mid=(i+j)/2;
				
				if(lIS[mid]<arr[k])
					i=mid+1;
				else
					i=mid;
			}
			lIS[i]=arr[k];
			if(i==len)
				len++;
		}
		return lIS;
	}
	/*
	public static int LIS(int arr[],int n)
	{
		int temp[] =  new int[n];
		Arrays.fill(temp, 1);
		for(int i=1;i<n;i++)
		{
			for(int j=0;j<i;j++)
			{
				if(arr[j]<=arr[i])
					temp[i]=temp[j]+1;
			}
		}
		for(int i:temp)
		{
			System.out.println(i);
		}
		return temp[n-1];
	}*/
    public static void main(String[] args) 
	{
    	int arr[] = {10,9,2,5,3,7,101,18};
    	int n=arr.length;
    	int ans[]=LIS(arr,n);
    	for(int j:ans)
    	{
    		System.out.println(j);
    	}
    }
}

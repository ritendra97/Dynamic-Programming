//Palindrome Partitioning with Minimum cut DP
// this below solution is O(n3) Solution  next to this  i am optimizing
import java.util.*;
public class DynamicProgramming 
{
	public static int minPalPartion(String str)
	{
		int n = str.length();
		boolean dp1[][] = new boolean[n][n];
		
		for(int g=0;g<dp1.length;g++)
		{
			for(int i=0,j=g;j<dp1.length;i++,j++)
			{
				if(g==0)
					dp1[i][j]=true;
				else if(g==1)
				{
					if(str.charAt(i)==str.charAt(j))
					   dp1[i][j] = true;
					else
					   dp1[i][j] = false;
				}
				else
				{
					if(str.charAt(i)==str.charAt(j) && dp1[i+1][j-1]==true)
						dp1[i][j] = true;
					else
						dp1[i][j] = false;
				}
			}
		}
		
		int dp2[][] = new int[n][n];
		
		for(int g=0;g<dp2.length;g++)
		{
			for(int i=0,j=g;j<dp2.length;i++,j++)
			{
				if(g==0)
				{
					dp2[i][j] = 0;
				}
				else if(g==1)
				{
					if(str.charAt(i)==str.charAt(j))
						dp2[i][j]=0;
					else
						dp2[i][j]=1;
				}
				else
				{
					if(dp1[i][j]==true)
						dp2[i][j]=0;
					else
					{
						int min = Integer.MAX_VALUE;
						for(int k=i;k<j;k++)
						{
							int left = dp2[i][k];
							int right= dp2[k+1][j];
							
							if(min>left+right+1)
								min = left+right+1;
						}
						dp2[i][j] = min;
					}
				}
			}
		}
		return dp2[0][n-1];
	}
	public static void main(String[] args) 
	{
        String str = "ababbbabbababa";
        System.out.println("Min cuts needed for "+"Palindrome Partitioning is: "+minPalPartion(str));
	}
}
// This below solution is O(n2) Solution 
import java.util.*;
public class DynamicProgramming 
{
	public static int minPalPartion(String str)
	{
		int n = str.length();
		boolean dp1[][] = new boolean[n][n];
		
		for(int g=0;g<dp1.length;g++)
		{
			for(int i=0,j=g;j<dp1.length;i++,j++)
			{
				if(g==0)
					dp1[i][j]=true;
				else if(g==1)
				{
					if(str.charAt(i)==str.charAt(j))
					   dp1[i][j] = true;
					else
					   dp1[i][j] = false;
				}
				else
				{
					if(str.charAt(i)==str.charAt(j) && dp1[i+1][j-1]==true)
						dp1[i][j] = true;
					else
						dp1[i][j] = false;
				}
			}
		}
		
		int dp2[] = new int[n];
		dp2[0]=0;
		
		for(int i=1;i<dp2.length;i++)
		{
			int min = Integer.MAX_VALUE;
			for(int j=i;j>=1;j--)
			{
				if(dp1[j][i])
				{
					if(dp2[j-1]<min)
						min=dp2[j-1];
				}
			}
			dp2[i]= min+1;
		}
		return dp2[n-1];
	}
	public static void main(String[] args) 
	{
        String str = "ababbbabbababa";
        System.out.println("Min cuts needed for "+"Palindrome Partitioning is: "+minPalPartion(str));
	}
}

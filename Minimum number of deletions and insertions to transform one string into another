//Minimum number of deletions and insertions to transform one string into another
import java.util.*;
public class DynamicProgramming 
{
	public static int lcs(String X, String Y,int m,int n)
	{
		int DP[][] = new int[m+1][n+1];
		
		for(int i=0;i<=m;i++)
		{
			for(int j=0;j<=n;j++)
			{
				if(i==0 || j==0)
				{
					DP[i][j]=0;
				}
				else if(X.charAt(i-1)==Y.charAt(j-1))
				{
					DP[i][j]=1+DP[i-1][j-1];
				}
				else
				{
					DP[i][j] = Math.max(DP[i-1][j], DP[i][j-1]);
				}
					
			}
		}
		return DP[m][n];
	}
	public static void printMinDelAndInsert(String str1,String str2)
    {
		int m = str1.length();
		int n = str2.length();
		int required = lcs(str1,str2,m,n);
		
		System.out.println("No of deletion is: "+(m-required)+"\nNo of insertion is: "+ (n-required));
    }
	public static void main(String[] args) 
	{
		String X = "heap";
		String Y = "pea";
		
		printMinDelAndInsert(X,Y);
	}
}

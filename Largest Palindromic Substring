//Largest Palindromic Substring

// A Java solution for longest palindrome
import java.util.*;

class GFG{

// Function to print a subString str[low..high]
static void printSubStr(String str, int low, int high)
{
	for (int i = low; i <= high; ++i)
		System.out.print(str.charAt(i));
}

// This function prints the
// longest palindrome subString
// It also returns the length
// of the longest palindrome
static int longestPalSubstr(String str)
{
	// get length of input String
	int n = str.length();

	// All subStrings of length 1
	// are palindromes
	int maxLength = 1, start = 0;

	// Nested loop to mark start and end index
	for (int i = 0; i < str.length(); i++) {
		for (int j = i; j < str.length(); j++) {
			int flag = 1;

			// Check palindrome
			for (int k = 0; k < (j - i + 1) / 2; k++)
				if (str.charAt(i + k) != str.charAt(j - k))
					flag = 0;

			// Palindrome
			if (flag!=0 && (j - i + 1) > maxLength) {
				start = i;
				maxLength = j - i + 1;
			}
		}
	}

	System.out.print("Longest palindrome subString is: ");
	printSubStr(str, start, start + maxLength - 1);

	// return length of LPS
	return maxLength;
}

// Driver Code
public static void main(String[] args)
{
	String str = "forgeeksskeegfor";
	System.out.print("\nLength is: "
		+ longestPalSubstr(str));
}
}

//Given two strings, find if first string is a subsequence of second
import java.util.*;

public class DynamicProgramming {

	public static void longestPalindromicSubString(String str) {

		boolean dp[][] = new boolean[str.length()][str.length()];
		int len = 0;

		for (int g = 0; g < str.length(); g++) {
			for (int i = 0, j = g; j < str.length(); i++, j++) {
				if (g == 0) {
					dp[i][j] = true;
				} else if (g == 1) {
					if (str.charAt(i) == str.charAt(j)) {
						dp[i][j] = true;

					} else {
						dp[i][j] = false;
					}
				} else {
					if (str.charAt(i) == str.charAt(j) && dp[i + 1][j - 1] == true) {
						dp[i][j] = true;
					} else {
						dp[i][j] = false;
					}
				}
				if (dp[i][j]) {
					len = g + 1;
				}
			}

		}

		System.out.println(len);
	}

	public static void main(String[] args) {
		String seq = "forgeeksskeegfor";
		longestPalindromicSubString(seq);
	}
}

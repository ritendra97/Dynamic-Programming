//maximum subsequence sum such that no three are consecutive 	
public class Main4 {

    public static int Solution(int arr[], int n){

        if(n<=-1) return 0;
        if(n==0) return arr[0];
        if(n==1) return arr[0]+arr[1];

        return  Math.max(Math.max(Solution(arr,n-1),arr[n]+Solution(arr,n-2)),arr[n]+arr[n-1]+Solution(arr,n-3));
    }

    public static void main(String[] args){
        int arr[] = {100, 1000, 100, 1000, 1};
        System.out.println(Solution(arr,arr.length-1));
    }
}


import java.util.*;
public class DyanamicProgramming 
{
	static int maxSumWO3Consec(int arr[], int n)
	{	 
		int sum [] = new int[n];
		
		if(n==1)
			sum[0]=arr[0];
		if(n>=2)
			sum[1]=arr[1]+arr[2];
		if(n>2)
			sum[2]= Math.max(sum[1], Math.max(arr[0]+arr[2], arr[0]+arr[1]));
		
		for(int i=3;i<n;i++)
		{
			sum[i] = Math.max(Math.max(sum[i-1], sum[i-2]+arr[i]), sum[i-3]+arr[i]+arr[i-1]);
		}
		return sum[n-1];
	}
	public static void main(String[] args) 
	{
		int arr[] = { 100, 1000, 100, 1000, 1 };
        int n = arr.length;
        System.out.println(maxSumWO3Consec(arr, n));
	}
}
